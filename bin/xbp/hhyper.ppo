#line 112 "D:\xharbour123_Bcc73\include\hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 26 "\hwgui\source\hhyper.prg"
_HB_CLASS HStaticLink ; UTILITY FUNCTION HStaticLink(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; ( nScope ) ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "HStaticLink" , {HSTATIC():classh} ) ) ; ;

   _HB_MEMBER { state} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "state" }, .F., .F. ), )
   _HB_MEMBER { m_bFireChild} ; IIF( !.F., s_oClass:AddMultiData(, .F., nScope + IIF( .F., 32, 0 ), { "m_bFireChild" }, .F., .F. ), )

   _HB_MEMBER { m_hHyperCursor} ; IIF( !.F., s_oClass:AddMultiData(, LoadCursor( 32649 ), nScope + IIF( .F., 32, 0 ), { "m_hHyperCursor" }, .F., .F. ), )

   _HB_MEMBER { m_bMouseOver} ; IIF( !.F., s_oClass:AddMultiData(, .F., nScope + IIF( .F., 32, 0 ), { "m_bMouseOver" }, .F., .F. ), )
   _HB_MEMBER { m_bVisited} ; IIF( !.F., s_oClass:AddMultiData(, .F., nScope + IIF( .F., 32, 0 ), { "m_bVisited" }, .F., .F. ), )

   _HB_MEMBER { m_oTextFont} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "m_oTextFont" }, .F., .F. ), )
   _HB_MEMBER { m_csUrl} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "m_csUrl" }, .F., .F. ), )
   _HB_MEMBER { dc} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "dc" }, .F., .F. ), )

   _HB_MEMBER { m_sHoverColor} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "m_sHoverColor" }, .F., .F. ), )
   _HB_MEMBER { m_sLinkColor} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "m_sLinkColor" }, .F., .F. ), )
   _HB_MEMBER { m_sVisitedColor} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "m_sVisitedColor" }, .F., .F. ), )

_HB_MEMBER { winclass} ; IIF( !.F., s_oClass:AddMultiClsData(, "STATIC", nScope + IIF( .F., 32, 0 ) + IIF( .F., 64, 0 ), { "winclass" }, .F. ), )


   _HB_MEMBER New( oWndParent, nId, nStyle, nLeft, nTop, nWidth, nHeight, cCaption, oFont, bInit,  bSize, bPaint, ctooltip, tcolor, bcolor, lTransp, cLink, vColor, lColor, hColor); IIF( .F., s_oClass:ModMethod( "New", @HStaticLink_New(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "New", @HStaticLink_New(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Redefine( oWndParent, nId, cCaption, oFont, bInit,  bSize, bPaint, ctooltip, tcolor, bcolor, lTransp, cLink, vColor, lColor, hColor); IIF( .F., s_oClass:ModMethod( "Redefine", @HStaticLink_Redefine(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Redefine", @HStaticLink_Redefine(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER INIT(); IIF( .F., s_oClass:ModMethod( "INIT", @HStaticLink_INIT(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "INIT", @HStaticLink_INIT(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER onEvent( msg, wParam, lParam); IIF( .F., s_oClass:ModMethod( "onEvent", @HStaticLink_onEvent(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "onEvent", @HStaticLink_onEvent(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER GoToLinkUrl( csLink); IIF( .F., s_oClass:ModMethod( "GoToLinkUrl", @HStaticLink_GoToLinkUrl(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "GoToLinkUrl", @HStaticLink_GoToLinkUrl(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER GetLinkText(); IIF( .F., s_oClass:ModMethod( "GetLinkText", @HStaticLink_GetLinkText(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "GetLinkText", @HStaticLink_GetLinkText(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER SetLinkUrl( csUrl); IIF( .F., s_oClass:ModMethod( "SetLinkUrl", @HStaticLink_SetLinkUrl(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "SetLinkUrl", @HStaticLink_SetLinkUrl(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER GetLinkUrl(); IIF( .F., s_oClass:ModMethod( "GetLinkUrl", @HStaticLink_GetLinkUrl(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "GetLinkUrl", @HStaticLink_GetLinkUrl(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER SetVisitedColor( sVisitedColor); IIF( .F., s_oClass:ModMethod( "SetVisitedColor", @HStaticLink_SetVisitedColor(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "SetVisitedColor", @HStaticLink_SetVisitedColor(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER SetHoverColor( cHoverColor); IIF( .F., s_oClass:ModMethod( "SetHoverColor", @HStaticLink_SetHoverColor(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "SetHoverColor", @HStaticLink_SetHoverColor(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER SetFireChild(lFlag); IIF( .F., s_oClass:ModInline( "SetFireChild", {|Self,lFlag | Self, ::m_bFireChild := lFlag }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "SetFireChild", {|Self,lFlag | Self, ::m_bFireChild := lFlag }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
   _HB_MEMBER OnClicked(); IIF( .F., s_oClass:ModMethod( "OnClicked", @HStaticLink_OnClicked(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "OnClicked", @HStaticLink_OnClicked(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER OnSetCursor( pWnd, nHitTest, message); IIF( .F., s_oClass:ModMethod( "OnSetCursor", @HStaticLink_OnSetCursor(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "OnSetCursor", @HStaticLink_OnSetCursor(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER SetLinkText( csLinkText); IIF( .F., s_oClass:ModMethod( "SetLinkText", @HStaticLink_SetLinkText(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "SetLinkText", @HStaticLink_SetLinkText(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER SetLinkColor( sLinkColor); IIF( .F., s_oClass:ModMethod( "SetLinkColor", @HStaticLink_SetLinkColor(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "SetLinkColor", @HStaticLink_SetLinkColor(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER PAINT(); IIF( .F., s_oClass:ModMethod( "PAINT", @HStaticLink_PAINT(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "PAINT", @HStaticLink_PAINT(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER OnMouseMove( nFlags, lParam); IIF( .F., s_oClass:ModMethod( "OnMouseMove", @HStaticLink_OnMouseMove(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "OnMouseMove", @HStaticLink_OnMouseMove(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS HStaticLink ;


UTILITY STATIC function HStaticLink_New( oWndParent, nId, nStyle, nLeft, nTop, nWidth, nHeight, cCaption, oFont, bInit,  bSize, bPaint, ctooltip, tcolor, bcolor, lTransp, cLink, vColor, lColor, hColor) ; local Self AS CLASS HStaticLink := QSelf() AS CLASS HStaticLink
   LOCAL oPrevFont


   ::HSTATIC:New( oWndParent, nId, nStyle, nLeft, nTop, nWidth, nHeight, cCaption, oFont, bInit,  bSize, bPaint, ctooltip, tcolor, bcolor, lTransp )

   IF vColor == NIL ; vColor := RGB( 5, 34, 143 ) ; END
   IF lColor == NIL ; lColor := RGB( 0, 0, 255 ) ; END
   IF hColor == NIL ; hColor := RGB( 255, 0, 0 ) ; END
   ::m_csUrl := cLink
   ::m_sHoverColor   := hColor
   ::m_sLinkColor    := lColor
   ::m_sVisitedColor := vColor

   ::state := 0
   ::title := IIf( cCaption == Nil, "", cCaption )


   IF ::oFont == NIL
      IF ::oParent:oFont <> NIL

         ::oFont := HFONT():Add( ::oParent:oFont:name, ::oParent:oFont:width, ::oParent:oFont:height,  ::oParent:oFont:weight, ::oParent:oFont:charset, ::oParent:oFont:italic, 1, ::oParent:oFont:StrikeOut )
      ELSE
         ::oFont := HFONT():Add( "Arial", 0, - 12, , , , 1, )
      ENDIF
   ELSE
      IF ::oFont:Underline  == 0
         oPrevFont := ::oFont
         ::oFont:Release()

         ::oFont := HFONT():Add( oPrevFont:name, oPrevFont:width, oPrevFont:height,  oPrevFont:weight, oPrevFont:charset, oPrevFont:italic, 1, oPrevFont:StrikeOut )
      ENDIF
   ENDIF

   IF lTransp <> NIL .AND. lTransp

      ::backstyle := 1
   ENDIF

   ::Activate()

   RETURN Self


UTILITY STATIC function HStaticLink_Redefine( oWndParent, nId, cCaption, oFont, bInit,  bSize, bPaint, ctooltip, tcolor, bcolor, lTransp, cLink, vColor, lColor, hColor) ; local Self AS CLASS HStaticLink := QSelf() AS CLASS HStaticLink
   LOCAL oPrevFont

   ::HSTATIC:New( oWndParent, nId, 0, 0, 0, 0, 0, oFont, bInit,  bSize, bPaint, ctooltip, tcolor, bcolor )

   IF vColor == NIL ; vColor := RGB( 5, 34, 143 ) ; END
   IF lColor == NIL ; lColor := RGB( 0, 0, 255 ) ; END
   IF hColor == NIL ; hColor := RGB( 255, 0, 0 ) ; END
   ::state := 0
   ::m_csUrl := cLink
   ::m_sHoverColor   := hColor
   ::m_sLinkColor    := lColor
   ::m_sVisitedColor := vColor

   IF ::oFont == NIL
      IF ::oParent:oFont <> NIL

         ::oFont := HFONT():Add( ::oParent:oFont:name, ::oParent:oFont:width, ::oParent:oFont:height,  ::oParent:oFont:weight, ::oParent:oFont:charset, ::oParent:oFont:italic, 1, ::oParent:oFont:StrikeOut )
      ENDIF
   ELSE
      IF ::oFont:Underline  == 0
         oPrevFont := ::oFont
         ::oFont:Release()

         ::oFont := HFONT():Add( oPrevFont:name, oPrevFont:width, oPrevFont:height,  oPrevFont:weight, oPrevFont:charset, oPrevFont:italic, 1, oPrevFont:StrikeOut )
      ENDIF
   ENDIF

   ::title   := cCaption
   ::style   := ::nLeft := ::nTop := ::nWidth := ::nHeight := 0

   IF lTransp <> NIL .AND. lTransp

      ::backstyle := 1
   ENDIF

   RETURN Self

UTILITY STATIC function HStaticLink_INIT() ; local Self AS CLASS HStaticLink := QSelf() AS CLASS HStaticLink

   IF ! ::lInit
      ::HSTATIC:init()
      ::nHolder := 1
      SetWindowObject( ::handle, Self )
      Hwg_InitWinCtrl( ::handle )
      IF ::Title <> NIL
         SETWINDOWTEXT( ::handle, ::title )
      ENDIF
   ENDIF

   RETURN NIL

UTILITY STATIC function HStaticLink_onEvent( msg, wParam, lParam) ; local Self AS CLASS HStaticLink := QSelf() AS CLASS HStaticLink


   IF msg == 15
      ::PAint()
   ELSEIF msg == 512
      hwg_SetCursor( ::m_hHyperCursor )
      ::OnMouseMove( wParam, lParam )
   ELSEIF msg == 0x0020
      ::OnSetCursor( msg, wParam, lParam )
   ELSEIF msg == 513
      hwg_SetCursor( ::m_hHyperCursor )
      ::OnClicked()
   ENDIF

   RETURN - 1

UTILITY STATIC function HStaticLink_GoToLinkUrl( csLink) ; local Self AS CLASS HStaticLink := QSelf() AS CLASS HStaticLink

   LOCAL hInstance := SHELLEXECUTE( csLink, "open", NIL, NIL, 2 )


   IF hInstance < 33
      RETURN .F.
   ENDIF

   RETURN .T.

UTILITY STATIC function HStaticLink_GetLinkText() ; local Self AS CLASS HStaticLink := QSelf() AS CLASS HStaticLink

   IF ( Empty( ::Title ) )
      RETURN ""
   ENDIF

   RETURN ::Title

UTILITY STATIC function HStaticLink_SetLinkUrl( csUrl) ; local Self AS CLASS HStaticLink := QSelf() AS CLASS HStaticLink

   ::m_csUrl := csUrl

   RETURN NIL

UTILITY STATIC function HStaticLink_GetLinkUrl() ; local Self AS CLASS HStaticLink := QSelf() AS CLASS HStaticLink

   RETURN ::m_csUrl

UTILITY STATIC function HStaticLink_SetVisitedColor( sVisitedColor) ; local Self AS CLASS HStaticLink := QSelf() AS CLASS HStaticLink

   ::m_sVisitedColor := sVisitedColor
   RETURN NIL

UTILITY STATIC function HStaticLink_SetHoverColor( cHoverColor) ; local Self AS CLASS HStaticLink := QSelf() AS CLASS HStaticLink

   ::m_sHoverColor := cHoverColor

   RETURN NIL

UTILITY STATIC function HStaticLink_OnClicked() ; local Self AS CLASS HStaticLink := QSelf() AS CLASS HStaticLink
   LOCAL nCtrlID

   IF ( ::m_bFireChild )
      nCtrlID := ::id
      ::SendMessage( ::oparent:Handle, 1024 + 101, nCtrlID, 0 )

   ELSE
      ::GoToLinkUrl( ::m_csUrl )
   ENDIF

   ::m_bVisited := .T.

   ::state := 1

   RedrawWindow( ::oParent:Handle, 4 + 1 , ::nLeft, ::nTop, ::nWidth, ::nHeight )
   SetFocus( ::handle )


   RETURN NIL

UTILITY STATIC function HStaticLink_OnSetCursor( pWnd, nHitTest, message) ; local Self AS CLASS HStaticLink := QSelf() AS CLASS HStaticLink

   ( pWnd )
   ( nHitTest )
   ( message )

   hwg_SetCursor( ::m_hHyperCursor )

   RETURN .T.

UTILITY STATIC function HStaticLink_SetLinkText( csLinkText) ; local Self AS CLASS HStaticLink := QSelf() AS CLASS HStaticLink

   ::Title := csLinkText
   ::SetText( csLinkText )

   RETURN NIL

UTILITY STATIC function HStaticLink_SetLinkColor( sLinkColor) ; local Self AS CLASS HStaticLink := QSelf() AS CLASS HStaticLink

   ::m_sLinkColor := sLinkColor

   RETURN NIL

UTILITY STATIC function HStaticLink_OnMouseMove( nFlags, lParam) ; local Self AS CLASS HStaticLink := QSelf() AS CLASS HStaticLink

   LOCAL xPos
   LOCAL yPos
   LOCAL res  := .F.

   ( nFlags )

   IF ::state <> 0
      xPos := LOWORD( lParam )
      yPos := HIWORD( lParam )

      IF xpos <= 4 .OR. xPos  >= ::nWidth - 4 .OR. yPos  >= ::nHeight - 4 .OR. ypos <= 4

         res := .T.
      ENDIF

      IF ( res .AND. ! ::m_bVisited ) .OR. ( res .AND. ::m_bVisited )
         ::state := 1


         RedrawWindow( ::oParent:Handle, 4 + 1 , ::nLeft, ::nTop, ::nWidth, ::nHeight )
      ENDIF

      IF ( ::state == 1 .AND. ! res ) .OR.  ( ::state == 1 .AND. ! res .AND. ::m_bVisited )
         ::state := 3
             RedrawWindow( ::oParent:Handle, 4 + 1 , ::nLeft, ::nTop, ::nWidth, ::nHeight )



      ENDIF

   ENDIF
   RETURN NIL

UTILITY STATIC function HStaticLink_PAINT() ; local Self AS CLASS HStaticLink := QSelf() AS CLASS HStaticLink

   LOCAL strtext    := ::Title

   LOCAL dwFlags

   LOCAL rcClient



   IF EMPTY( ::oParent:handle )
      RETURN Nil
   ENDIF
   ::dc := HPAINTDC():new( ::handle )
   IF ::state == 0
      ::State := 1
   ENDIF

   rcClient   := GetClientRect( ::handle )
   ::dc:SetBkMode( 1 )
   dwFlags    := 0




















dwFlags  += ( 4 + 32768 )

::dc:SelectObject( ::oFont:handle )
IF ::state == 1
   IF ::m_bVisited
      ::dc:SetTextColor( ::m_sVisitedColor )
   ELSE
      ::dc:SetTextColor( ::m_sLinkColor )
   ENDIF
ELSEIF ::state == 3
   ::dc:SetTextColor( ::m_sHoverColor )
ENDIF

::dc:DrawText( strtext, rcClient, dwFlags )
::dc:END()

RETURN NIL
